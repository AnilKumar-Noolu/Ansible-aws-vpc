---
- name: Setup stack
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Import vpc-output-vars
      include_vars: vars/vpc-output-vars

    - name: Import stack setup
      include_vars: vars/stack_setup

    - name: create ec2 key
      ec2_key:
        name: ec2-stack-key
        region: "{{region}}"
      register: key_out

    - name: save private key into file loginkey
      copy:
        content: "{{key_out.key.private_key}}"
        dest: "./loginkey.pem"
        mode: 0600
      when: key_out.changed

    - name: craete SG for ELB
      ec2_group:
        name: ELB-SG
        description: Allow port 80 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: ELBSG_out

    - name: create SG for EC2-stack
      ec2_group:
        name: ec2-stack-SG
        description: Allow port 22 from everywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: stackSG_out

    - name: update SG for internal communication
      ec2_group:
        name: ec2-stack-SG
        description: Allow port 22 from everywhere and all ports within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{stackSG_out.group_id}}"

    - name: creating nginx web01
      ec2:
        key_name: ec2-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
        exact_count: 1
        count_tag:
          Name: "web01"
        group_id: "{{stackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out
#    - debug:
#        var: web01_out

    - name: creating Tomcat app01
      ec2:
        key_name: ec2-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
        exact_count: 1
        count_tag:
          Name: "app01"
        group_id: "{{stackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out
#    - debug:
#        var: app01_out

    - name: creating memcache mc01
      ec2:
        key_name: ec2-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
        exact_count: 1
        count_tag:
          Name: "mc01"
        group_id: "{{stackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out
        #    - debug:
        #        var: mc01_out

    - name: creating RabbitMQ rmq01
      ec2:
        key_name: ec2-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
        exact_count: 1
        count_tag:
          Name: "rmq01"
        group_id: "{{stackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out
        #    - debug:
        #        var: rmq011_out

    - name: creating mysql db01
      ec2:
        key_name: ec2-stack-key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
        exact_count: 1
        count_tag:
          Name: "db01"
        group_id: "{{stackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out
    - debug:
        var: "{{db01_out.tagged_instances[0].id}}"

    - local_action:
        module: ec2_elb_lb
        name: "anil-elb"
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{ ELBSG_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80



